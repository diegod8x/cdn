import { ElementRef, EventEmitter, OnChanges, OnInit, Renderer2 } from '@angular/core';
export declare class DatePickerRespComponent implements OnInit, OnChanges {
    private render;
    private elementRef;
    showWindowDate: boolean;
    activeStylesDate: {};
    week: string[];
    monthActual: any;
    daysSelected: any;
    days: Date[];
    dateSelect: any;
    indexWeek: any;
    monthPrev: number;
    monthNext: number;
    year: number;
    monthActual2: any;
    monthSelected: any;
    daysSelected2: any;
    days2: Date[];
    dateSelect2: any;
    indexWeek2: any;
    monthPrev2: number;
    monthNext2: number;
    year2: number;
    dayClicked1: number;
    dayClicked2: number;
    dayClicked3: number;
    dayClicked4: number;
    dayClicked5: number;
    dayClicked6: number;
    fullDateSpanish1: any;
    fullDateSpanish2: any;
    activateButton: boolean;
    hideIcon2Right: boolean;
    hideIcon2Left: boolean;
    hideIcon1Right: boolean;
    hideIcon1Left: boolean;
    showIconOffDate: boolean;
    fromConver: string[];
    fullDaySaved: any;
    fullDaySaved2: any;
    resultBeDate: string;
    optionsShortYear: Object;
    optionsFullYear: Object;
    validatorDate: RegExp;
    validatorMMYYYY: RegExp;
    top: any;
    left: any;
    msgError: boolean;
    begaingDate2: string;
    dayClicked8: any;
    dayClicked9: any;
    statusResp: boolean;
    statusOpenCalendarLeft: boolean;
    statusOpenCalendarRight: boolean;
    sz: any;
    dayOfBegaingDate: any;
    fromDateInput: ElementRef<HTMLInputElement>;
    toDateInput: ElementRef<HTMLInputElement>;
    calendar: ElementRef;
    nextM2: ElementRef;
    dropdate: ElementRef;
    wdrop: ElementRef;
    sizeIcon: any;
    set begaingDate(value: string);
    set newStatusOpen(value: any);
    onClickDate: EventEmitter<object>;
    activeWindowDate: EventEmitter<object>;
    constructor(render: Renderer2, elementRef: ElementRef);
    onKeydownHandler(event: KeyboardEvent): void;
    onGlobalClick(event: any): void;
    sizeChange(event: any): void;
    onScroll(event: any): void;
    blockPaste(e: KeyboardEvent): void;
    blockCopy(e: KeyboardEvent): void;
    blockCut(e: KeyboardEvent): void;
    ngOnInit(): void;
    ngOnChanges(): void;
    showCalendarInsideLeft(): void;
    closeCalendarInsideLeft(): void;
    showCalendarInsideRight(): void;
    closeCalendarInsideRight(): void;
    determinateW(): void;
    determinateDimentions(): void;
    showSearchDate(): void;
    searchDateInputs(): void;
    cleanData(cadena: any): any;
    compDTE(): void;
    keyUpDownInputDateLeft(event: any): false | undefined;
    keyUpDownInputDateRight(event: any): false | undefined;
    fragmentDate(info: any): string | undefined;
    keyDownInputDate(): void;
    changeColorIcon(): void;
    prevMonth(): void;
    nextMonth(): void;
    getDaysFromDate(month: number, year: number): void;
    prevMonth2(): void;
    nextMonth2(): void;
    getDaysFromDate2(month: number, year: number): void;
    selectDayEvenLeft(event: any): void;
    selectDayEvenRight(event: any): void;
    addClassDaysRight(value: string | number, value2: any): object;
    addClassDaysLeft(value: string | number, value2: any): object;
    deleteClassDaysRight(value?: string): void;
    deleteClassDaysLeft(value?: string): void;
    selectedDateLeft(): void;
    converDateValue(dateValue: string): Date;
    validateActiveButton(fromConverValue: Date, toConverValue: Date, fromDateValue: string, toDateValue: string): void;
}
