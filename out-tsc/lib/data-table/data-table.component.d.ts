import { OnInit, OnChanges, EventEmitter, TemplateRef, ElementRef } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { TagCommentService } from './services/tag-comment-service/tag-comment.service';
export declare class DataTableComponent implements OnInit, OnChanges {
    private tagService;
    infoDataHead: Array<any>;
    infoDataBody: Array<any>;
    upDownArrow: boolean;
    multiVis: number;
    dropDownSelectAll: any[];
    posAsignVisIcon: number;
    iconsActive: boolean;
    nameIconColum: string;
    paymentDepositAttr: string;
    nameCellMount: Array<string>;
    paymentExpectName: Array<string>;
    posColumnAlternative: Array<number>;
    alternativeActive: boolean;
    arrowItems: Array<number>;
    nameOfColumnDate: string;
    columnDateActive: boolean;
    lastColumnCustom: boolean;
    titlePlusBtn: string;
    begaingDate: string;
    dataButtonSearch: any;
    relevantPropertyYear: string;
    typeTpl: number;
    clpColumnsAmounts: Array<string>;
    perAllOption: boolean;
    usColumnsAmounts: Array<string>;
    nameNumCart: string;
    statusDimentionsWC: boolean;
    listWidthColumn: Array<any>;
    namePropertyStatusStar: string;
    namePropertyComment: string;
    dataDropdownStarCard: any;
    statusTagComment: string;
    commentTag: string;
    idPropertyName: string;
    accountFromProperty: string;
    accountToProperty: string;
    accountFromPropertyType: string;
    accountToPropertyType: string;
    offCalculator: boolean;
    newInfoArrSearchAccounts: any;
    propertySelectNumAccount: string;
    propertySelectNameAccount: string;
    listPropertyTransferName: any;
    fromBankNameProperty: string;
    toBankNameProperty: string;
    dteHourProperty: string;
    namePropertyOrderTypeProduct: Array<string>;
    propertyFilAllDrop: string;
    respInfoDesc: string;
    directionTextColumn: Array<string>;
    statusChangeDirectionTitle: boolean;
    set loaderRespStatus(value: boolean);
    set limitCalculator(value: number);
    customBlockTemplateRef: TemplateRef<any>;
    thLastCustomBlockTemplateRef: TemplateRef<any>;
    tdLastCustomBlockTemplateRef: TemplateRef<any>;
    extComponentTemplateRef: TemplateRef<any>;
    customHeaderTableTemplateRef: TemplateRef<any>;
    customFooterTableTemplateRef: TemplateRef<any>;
    trTable: ElementRef;
    onClickDropDownData: EventEmitter<any>;
    onSendInfoStar: EventEmitter<any>;
    onRemoveInfoStar: EventEmitter<any>;
    onClickDownloadCard: EventEmitter<any>;
    onClickDownloadLink: EventEmitter<any>;
    onGetInfoTag: EventEmitter<any>;
    onDeleteInfoTag: EventEmitter<any>;
    onGetInfoTooltip: EventEmitter<any>;
    onGetInfoDataToolAccount: EventEmitter<any>;
    onGetInfoDataResp: EventEmitter<any>;
    contentLoaded: boolean;
    dataHead: Array<any>;
    dataBody: any;
    resultSearch: any;
    infoSearch: any;
    intervalVis: number;
    UDarrow: boolean;
    prevPos: number;
    btnPage: Array<any>;
    actualPage: number;
    listBtn: number;
    orderAsc: boolean;
    iconVisAsignPos: number;
    activeIcon: boolean;
    columIconName: string;
    attrDepositPayment: string;
    mountCellName: Array<string>;
    nameExpectPayment: Array<string>;
    alternativeColumnPos: Array<number>;
    activeAlternative: boolean;
    itemsArrow: Array<number>;
    dateColumnOfName: string;
    activeDateColumn: boolean;
    activeAlertsuccess: boolean;
    activeAlertWarning: boolean;
    countAmount: number;
    activeSpinner: boolean;
    customColumnLast: boolean;
    btnPlusTitle: string;
    scanDate: boolean;
    valueWindowDate: boolean;
    valueWindowMount: boolean;
    valueDateWindow: object;
    valueMountWindow: object;
    sendValueWindowDate: boolean;
    sendValueWindowMount: boolean;
    tplType: number;
    monthsVis: Array<any>;
    actualYear: string;
    actualPeriod: string;
    itemsPeriod: number;
    selectActivePeriod: string;
    actualInterval: number;
    actualItemCat: string;
    statusPlus: boolean;
    infoWrite: string;
    orderDateAsc: boolean;
    actualItemOrder: string;
    amountsColumns: Array<string>;
    searchFilStatus: boolean;
    dataMoment: Array<object>;
    dataMoment2: Array<object>;
    countMoveTotal: number;
    fromAmount: any;
    toAmount: any;
    fromDatePiker: string;
    toDatePiker: string;
    validatorDate: RegExp;
    statusMsgNoMovements: boolean;
    statusClck: boolean;
    propertyPerFrom: string;
    propertyPerTo: string;
    itemsDate: any;
    optionAllPer: boolean;
    columnsAmountsUs: Array<string>;
    cartNumName: string;
    statusDimentions: boolean;
    columnWidthList: Array<any>;
    starStatusPropertyName: string;
    lastItemCart: any;
    listItemsFavorites: Array<object>;
    commentPropertyName: string;
    cardStarDropdownData: any;
    clckSelectingAll: string;
    commentTagStatus: string;
    tagComment: string;
    itemsTagComments: any;
    statusCheckCalculator: FormControl;
    amountActualCalculator: number;
    namePropertyId: string;
    listItemsActiveCheck: Array<any>;
    actualItemChecked: number;
    statusOptionCheck: boolean;
    selectedDataTooltip: Array<any>;
    listItemTypeTransfer: any;
    listItemOperation: any;
    listItemsAccountsFrom: any;
    nameTransferPorpertyList: string;
    namePropertyAccountFrom: string;
    namePropertyAccountTo: string;
    typePropertyFromAccount: string;
    typePropertyToAccount: string;
    valFilTo: string;
    valFiltFrom: string;
    valFilProducts: string;
    valFilTransf: string;
    valFilTypeTransf: string;
    accountsSearchArrInfoNew: any;
    accountNumSelectProperty: any;
    accountNameSelectProperty: any;
    statusClrInDate: boolean;
    eventsSubject: Subject<void>;
    propertyNameBankFrom: string;
    propertyNameBankTo: string;
    posStatusFromTransf: string;
    msgSearch: string;
    propertyHourDte: string;
    reqTag: any;
    numEleValFilTypeTransf: any;
    propertyNameTypeProduct: Array<string>;
    dropAllFilProperty: string;
    begaingDate2: string;
    statuSpecific: boolean;
    descItem: string;
    statusResponsive: boolean;
    rangeVertical: any;
    listDirectionTitle: Array<string>;
    directionTitleChange: boolean;
    statusNextPageResp: boolean;
    statusLoad: boolean;
    szCal: any;
    statusItemList: boolean;
    actualItemList: number;
    statusRespTable: boolean;
    statusOpenDte: boolean;
    loadingResp: boolean;
    starIconSize: number;
    statusCardsActive: boolean;
    iconDate: any;
    calulatorOff: boolean;
    statusRespLoader: boolean;
    activeAlertsuccess2: boolean;
    statusReload: boolean;
    calculatorlimit: number;
    clearCheck: boolean;
    countList: number;
    constructor(tagService: TagCommentService);
    ngOnInit(): void;
    ngOnChanges(): void;
    dtmDimentionsW(): void;
    validateRes(): number;
    determinateD(info: string): "right" | "left" | "center";
    closeDte(): void;
    loadResp(): void;
    dtmRespTable(): void;
    positiveNum(info: any): string;
    pulldown(info: any): void;
    onResize(event: any): void;
    showAllCards(): void;
    scrollmove(info: any): void;
    orderNewInfo(): any[];
    sendDataResponsive(info: any, idx: any): void;
    getTransOrderProduct(): any[];
    setFirstSearchProduct(info: string): any[];
    setItemActive(item: object): void;
    getListSelected(): void;
    getItemActiveCheck(item: object): boolean;
    delItemActive(item: object): void;
    getMatchLastItem(info: object): boolean;
    setItemCalculator(status: boolean, infoItem: object, idx: number): void;
    formatAmount(infoData: any): number;
    getTagInfo(infoTag: any): void;
    deleteTagInfo(infoTag: any): void;
    clickOutElementDate(event: any): void;
    getOnlyTagItem(infoData: any): any;
    checkAtrTypeOperation(itemAttr: string): boolean;
    getInfoCardDownload(infoDownload: any): void;
    getInfoCardDownloadLink(infoDownloadLink: any): void;
    checkColumnAmountUs(info: any): boolean;
    activeWindowDateFunction(event: any): void;
    clickOutElementMount(event: any): void;
    getYearsArr(): any[];
    getListTypeTransfer(): any[];
    getListTypeAccountFrom(): any[];
    getListTypeOperation(): any[];
    toogleCheckIn(): void;
    getCommentsPrev(): any[];
    convertFormatDate(infoDate: any): any[];
    activeWindowMountFunction(event: any): void;
    determinateTypeCustom(): void;
    formatClp(value: any): string;
    determinateTmplt(type: any): void;
    prevOrderDate(infoDataBody: any): any;
    orderByAscDatePrev(infoArrDate: any): any;
    orderByAsc(info: any): void;
    orderByDesc(info: any): void;
    orderByAscSearchAmountT(info: any): void;
    orderByDescSearchAmountT(info: any): void;
    orderByAscAmountCurrent(info: any): void;
    orderByDescAmountCurrent(info: any): void;
    getInfoAmount(infoData: any): void;
    searchWithAmount(infoData: any, eleActual: any, infoColumn: any): void;
    searchWithOutAmount(infoData: any, eleActual: any, infoColumn: any): void;
    orderBy(info: string): void;
    compDate(dte1: any, dte2: any, dtetm1: any, dtetm2: any): boolean;
    compDateBasic(dte1: any, dte2: any): boolean;
    orderByDate(): void;
    orderByAscDate(info: any): void;
    orderByDescDate(info: any): void;
    determinateItemColumnsAmounts(item: string): boolean;
    sendDataStar(info: any): void;
    removeDataStar(info: any): void;
    searchOnlyStar(info: any): any;
    searchOnlyStarFilled(info: any): any;
    showPrevYear(): void;
    removeItemMoment(info: string): void;
    addItemMoment(info: object): void;
    removeItemFavorite(info: string): void;
    orderNoRepeat(infoArray: any): unknown[];
    addItemFavorite(info: Array<object>): void;
    showPerYear(year: any): void;
    alertOff(): void;
    convertCamelCase(info: string): string;
    cleanAmountBech(texto: any): any;
    cleanAmount(amount: any): number;
    cleanDataString(info: any): any;
    determinateYear(yearData: any, actualYear: any): void;
    spinnerOn(): void;
    spinnerOff(): void;
    showMatchBetwenDateResp(values: any): void;
    showMatchBetwenDate(values: any): void;
    showMatchBetwenDate2(info: any): void;
    converDateValue(dateValue: string): Date;
    verifyColumnAmount(info: string): boolean;
    verifyColumnAmountTooltip(info: string): boolean;
    showMatchBetwenMount(values: any): void;
    setInfoGlobalInput(info: any): void;
    setInfoGlobalCat(info: any): void;
    setResetGlobalCat(): void;
    verifyDataExistType(info: any, arrInfo: Array<any>, infoFil: any): any;
    verifyDataExist(info: any, arrInfo: Array<any>): any;
    verifyDataExistSpecific(info: any, arrInfo: Array<any>): any;
    getDataActual(...infoData: any[]): any;
    getDataActualSpecific(...infoData: any[]): any;
    showMatchOnlyVis(info: any): any[];
    showMatchsAll(info: any): void;
    showSpecificItem(info: any): void;
    selectingView(valueComponent: string): void;
    compareDteFrom(infoDteC: string, infoDteF: string): boolean;
    compareDteTo(infoDteC: string, infoDteF: string): boolean;
    compareDteDiffer(infoDteF: string, infoDteC: string): boolean;
    setInfoDteTo(info: any): void;
    cleanMsg(): void;
    setInfoDteFrom(info: any): void;
    generalPermt2(): void;
    generalPermt(): void;
    selectingViewTypeTransfer(info: any): void;
    selectingViewTypeTransfer2(info: any): void;
    convertDtePro(info: string): string;
    selectingViewTypeProducts(info: any): void;
    selectingViewTypeProducts2(info: any): void;
    activeProSpinner(): void;
    selectingViewTypeOperation(info: any): void;
    selectingViewTypeOperation2(info: any): void;
    createBtnPagination(numDiv: number, numItems: number): void;
    determinatePage(numP: number): void;
    determinatePageNew(numP: number): void;
    nextPage(): void;
    nextPageResponsive(): void;
    prevPage(): void;
    evaluateStatus(item1: number, item2: number): boolean;
    determinateActualVis(): void;
    determinateActualVisNew(): void;
    showArrow(columNumArrow: number): boolean;
    checkAtrPayment(itemAttr: string): boolean;
    checkColumnAlternative(columnPos: number): boolean;
    cleanFilters2(): void;
    cleanFilters(event: MouseEvent): void;
    determinateDate(infoDate: string): string;
}
